<?php

define('PLSURL', 'http://yp.shoutcast.com/sbin/tunein-station.pls?id=%s');

/**
 * Class lifeRadio
 */
class lifeRadio
{
	/**
	 * 
	 * @var unknown
	 */
    static $station = array();
    
    /**
     * 
     * @param string $primaryonly
     * @return Ambigous <multitype:, multitype:unknown >
     */
    static function getGenres($primaryonly = false, $format = 'format', $clause = '')
    {
    	static $genres = array();
    	
    	if (empty($genres))
    	{
    		$base = array();
    		foreach(file(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'genres.diz') as $genre)
    		{
    			$genre = trim($genre);
    			if (substr($genre, strlen($genre)-1, 1) == '=') {
    				$base['format'] = self::formatGenre($base['none']=substr($genre, 0, strlen($genre)-1), false);
    			} elseif (!empty($base['format'])) {
    				$genres['format'][$base['format']][self::formatGenre($genre)] = self::formatGenre($genre);
    				$genres['none'][$base['none']][$genre] = $genre;
    			}
    		}
    		unset($base);
    	}
    	return ($primaryonly == false) ? (!empty($clause) && isset($genres[$format][$clause]) ? $genres[$format][$clause] : $genres[$format] ) : array_keys($genres[$format]);
    }
    

    /**
     *
     * @param string $primaryonly
     * @return Ambigous <multitype:, multitype:unknown >
     */
    private function formatGenre($genre = '', $undo = false)
    {
    	if ($undo == false)
    	{
    		return str_replace(' ', '-', strtolower($genre));
    	} elseif ($undo == true) {
    		foreach(self::getGenres(false, 'none') as $base => $genres) {
    			if (self::formatGenre($base) == $genre)
    				return $base;
    			foreach($genres as $key => $style) {
    				if (self::formatGenre($style) == $genre)
    					return $style;
    			}
    		}
    	}
    	return $genre;
    }
    /**
     * 
     * @param unknown $url
     * @param unknown $vars
     * @return Ambigous <boolean, string, mixed>
     */
    private function getExternal($url, $vars = array()) {
    	$data = '';
    	if (strlen($data)==0 && function_exists('curl_init')) {
    		$cc = curl_init();
    		curl_setopt($cc, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT'] );
    		curl_setopt($cc, CURLOPT_POST, (count($vars)>0?true:false));
    		if (count($vars)>0)
    			curl_setopt($cc, CURLOPT_POSTFIELDS, http_build_query($vars) );
    		curl_setopt($cc, CURLOPT_URL, $url);
    		curl_setopt($cc, CURLOPT_HEADER, FALSE);
    		curl_setopt($cc, CURLOPT_FOLLOWLOCATION, TRUE);
    		curl_setopt($cc, CURLOPT_RETURNTRANSFER, TRUE);
    		curl_setopt($cc, CURLOPT_FORBID_REUSE, TRUE);
    		curl_setopt($cc, CURLOPT_VERBOSE, false);
    		curl_setopt($cc, CURLOPT_SSL_VERIFYHOST, false);
    		curl_setopt($cc, CURLOPT_SSL_VERIFYPEER, false);
    		$data = curl_exec($cc);
    		curl_close($cc);
    	}
    	if (strlen($data)==0 && function_exists('file_get_contents'))
    	{
    		$data = file_get_contents($url);
    	}
    	return (strlen($data)>0?$data:false);
    }
 
    /**
     * 
     * @param string $mode
     * @param string $basis
     * @return Ambigous <mixed, NULL, boolean, unknown>
     */
    static function getStationsFromAPI($mode = 'top500', $basis = '')
    {
    	mt_srand(mt_rand(-microtime(true), microtime(true)));
    	mt_srand(mt_rand(-microtime(true), microtime(true)));
    	mt_srand(mt_rand(-microtime(true), microtime(true)));
    	mt_srand(mt_rand(-microtime(true), microtime(true)));
    	
    	switch($mode){
    		case 'genre':
    			if (!$stations = lifeCache::read('life_radio_genre_'.sha1($basis))) {
   					$stations = self::cleanStations(json_decode(self::getExternal("http://www.shoutcast.com/Home/BrowseByGenre", array('genrename' => self::formatGenre($basis, true)), true)));
   					lifeCache::write('life_radio_genre_'.sha1($basis), $stations, 60 * mt_rand(5, 11));
    			}
   				break;
   			case 'random':
   				if (!$stations = lifeCache::read('life_radio_random')) {
   					$stations = self::cleanStation(json_decode(self::getExternal("http://www.shoutcast.com/Home/GetRandomStation", array('query' => '')), true));
   					lifeCache::write('life_radio_random', $stations, 60 * mt_rand(0.11119, 0.78889));
   				}
   				break;
   			case 'search':
   				if (!$stations = lifeCache::read('life_radio_search_'.sha1($basis))) {
   					$stations = self::cleanStations(json_decode(self::getExternal("http://www.shoutcast.com/Home/Search", array('query' => $basis)), true));
   					lifeCache::write('life_radio_search_'.sha1($basis), $stations, mt_rand(24, 89) * mt_rand(120, 720));
   				}
   				break;
   			default:
    		case 'top500':
    			if (!$stations = lifeCache::read('life_radio_top500')) {
    				$stations = self::cleanStations(json_decode(self::getExternal("http://www.shoutcast.com/Home/Top", array('query' => '')), true));
    				lifeCache::write('life_radio_top500', $stations, 60 * mt_rand(5, mt_rand(7,13)));
    			}
    			break;
    	}
    	return $stations;
    
    }

    /**
     * 
     * @param unknown $stations
     * @return multitype:NULL
     */
    private function cleanStations($stations = array())
    {
    	$ret = array();
    	foreach($stations as $id => $station)
    	{
    		$ret[sha1($station['ID'].$_SERVER["HTTP_HOST"].$station['NAME'])] = self::cleanStation($station);
    	}
    	return $ret;
    }

    /**
     *
     * @param unknown $stations
     * @return multitype:NULL
     */
    private function cleanStation($station = array())
    {
    	$ret = array();
    	foreach($station as $key => $value)
    	{
    		switch ($key)
    		{
    			case "ID":
    				$ret['key'] = sha1($value.$_SERVER["HTTP_HOST"].$station['NAME']);
    				$id = $value;
    				break;
    			default:
    				$ret[strtolower($key)] = $value;
    				break;
    			
    		}
    	}
    	if (!$keys = lifeCache::read('life_radio_identity_keys'))
    		$keys = array();
    	$keys[$ret['key']] = $id;
    	lifeCache::write('life_radio_identity_keys', $keys, 3600 * 48 * 7 * 4 * 12);
    	return $ret;
    }    
    
    
    /**
     * 
     * @param number $stationid
     * @param unknown $mimetypes
     * @return Ambigous <multitype:, multitype:Ambigous <unknown> >
     */
    static function getStreamsFromStationID($stationkey = '')
    {
    	if (!$keys = lifeCache::read('life_radio_identity_keys'))
    		return array();
    	if (!isset($keys[$stationkey]))
    		return array();
    	return array('streams' => self::parsePlaylist(sprintf(PLSURL, $keys[$stationkey])));
    }

    /**
     * 
     * @param unknown $playlistUrl
     * @return Ambigous <multitype:unknown , mixed, NULL, boolean, unknown>
     */
    private function parsePlaylist($playlistUrl) {
    	if (!$streamUrls = lifeCache::read('life_radio_streams_'.sha1($playlistUrl))) {
	    	$response = self::getExternal($playlistUrl, array());
	    	$playlist = parse_ini_string($response);
	    	$streamUrls = array();
	    	foreach($playlist as $key => $value)
	    	{
	    		if (substr($key, 0, 4) == 'File')
	    			$streamUrls[] = $value;
	    	}
	    	lifeCache::write('life_radio_streams_'.sha1($playlistUrl), $streamUrls, 60 * mt_rand(30, 90) * mt_rand(45, 135));
    	}
    	return $streamUrls;
    }
 
}

